#!/usr/bin/env bash
set -euo pipefail

PKGIT_GIT_URL="$1"
pkg="$2"
tag="$3"
BUILD_DIR="$4"
BIN_DIR="$5"
PKGS_DIR="$6"

INSTALL_DIR="$PKGS_DIR/$pkg/$tag"

SRC_DIR="$BUILD_DIR/$pkg-$tag"
rm -rf "$SRC_DIR"

if [[ "$tag" == "HEAD" ]]; then
    git -c advice.detachedHead=false clone --depth 1 "$PKGIT_GIT_URL" "$SRC_DIR"
else
    git -c advice.detachedHead=false clone --branch "$tag" --depth 1 "$PKGIT_GIT_URL" "$SRC_DIR"
fi

cd "$SRC_DIR"

if [ -f "/etc/pkgit/deps/$pkg.sh" ]; then
    echo "grabbing user-defined dependencies..."
    source "/etc/pkgit/deps/$pkg.sh"
elif [ -f "deps.sh" ]; then
    echo "grabbing repo-defined dependencies..."
    source "deps.sh"
else
    DEPS=()
fi

#install_dependencies() {
#    echo "Dependencies: ${DEPS[@]}"
#    for dep in "${DEPS[@]:-}"; do
#        [[ -z "$dep" ]] && continue
#        depname=$(basename "$dep" .git | tr '[:upper:]' '[:lower:]')
#        echo "[pkgit] Installing dependency: $depname"
#        pkgit ar "$dep"
#        pkgit i "$depname"
#    done
#}

install_dependencies() {
    echo "Dependencies: ${DEPS[@]}"
    for dep in "${DEPS[@]:-}"; do
        [[ -z "$dep" ]] && continue

        # Split URL and version (if provided)
        url=$(awk '{print $1}' <<<"$dep")
        ver=$(awk '{print $2}' <<<"$dep")

        depname=$(basename "$url" .git | tr '[:upper:]' '[:lower:]')
        echo "[pkgit] Installing dependency: $depname (url: $url version: ${ver:-none})"

        if [[ -n "$ver" ]]; then
            pkgit ar "$url" "$ver"
            pkgit i "$depname:$ver"
        else
            pkgit ar "$url"
            pkgit i "$depname"
        fi
    done
}

install_bins() {
    find "$PKGS_DIR/$pkg/$tag" -type f -executable -exec ln -sf {} "$BIN_DIR" \;
}

copy_executables() {
    echo "Copying executable files recursively to $INSTALL_DIR"
    mkdir -p "$INSTALL_DIR"
    find . -type f -executable -exec cp --parents {} "$INSTALL_DIR" \;
}

install_dependencies

if [ -f "bldit" ]; then
    source bldit
    bldit
    copy_executables

elif [ -f "autogen.sh" ]; then
    echo "Detected autogen.sh build system"
    ./autogen.sh --prefix="$INSTALL_DIR"
    make -j$(($(nproc) / 2))
    make install

elif [ -f "cabal.project" ] || [ -f *".cabal" ]; then
    echo "Detected Cabal build system"
    cabal update
    cabal install --only-dependencies
    cabal configure --prefix="$INSTALL_DIR" -fembed_data_files
    cabal build
    cabal haddock --html-location=URL --hyperlink-source

elif [ -f "Makefile" ]; then
    echo "Detected Make build system"
    make -j$(($(nproc) / 2))
    make install PREFIX="$INSTALL_DIR"

elif [ -f "CMakeLists.txt" ]; then
    echo "Detected CMake build system"
    mkdir -p build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" ..
    make
    make install
    cd ..

elif [ -f "Cargo.toml" ]; then
    echo "Detected Cargo (Rust) build system"
    cargo build --release
    mkdir -p "$INSTALL_DIR/bin"
    cp -r target/release/* "$INSTALL_DIR/bin/"

elif [ -f "build.zig" ]; then
    echo "Detected Zig build system"
    zig build -Dprefix="$INSTALL_DIR"
    zig build install

elif [ -f "meson.build" ]; then
    echo "Detected Meson build system"
    meson setup build --prefix="$INSTALL_DIR"
    meson compile -C build
    meson install -C build

elif [ -f "build.ninja" ]; then
    echo "Detected Ninja build system"
    ninja
    ninja install

elif [ -f "SConstruct" ]; then
    echo "Detected SCons build system"
    scons prefix="$INSTALL_DIR"
    scons install prefix="$INSTALL_DIR"

elif [ -f "configure.ac" ] || [ -f "configure" ]; then
    echo "Detected Autotools build system"
    ./configure --prefix="$INSTALL_DIR"
    make
    make install

elif [ -f "build.gradle" ]; then
    if grep -q "kotlin" build.gradle; then
        echo "Detected Gradle Kotlin DSL build system"
    else
        echo "Detected Gradle build system"
    fi
    gradle build
    mkdir -p "$INSTALL_DIR/libs"
    cp build/libs/* "$INSTALL_DIR/libs/"

elif [ -f "BUILD" ] || [ -f "WORKSPACE" ]; then
    echo "Detected Bazel build system"
    bazel build //:all
    copy_executables

elif [ -f "BUCK" ]; then
    echo "Detected Buck build system"
    buck build //...
    copy_executables

elif [ -f "pants.toml" ] || [ -f "pants.ini" ] || [ -f "pants.yaml" ]; then
    echo "Detected Pants build system"
    pants build ::
    copy_executables

elif [ -f "flake.nix" ]; then
    echo "Detected Nix flake build system"
    nix build
    mkdir -p "$INSTALL_DIR"
    cp -r ./result/* "$INSTALL_DIR/"

elif [ -f "default.nix" ]; then
    echo "Detected Nix build system"
    nix-build
    mkdir -p "$INSTALL_DIR"
    cp -r ./result/* "$INSTALL_DIR/"

elif [ -f "build.sbt" ]; then
    echo "Detected SBT (Scala) build system"
    sbt compile
    sbt publishLocal
    copy_executables

elif [ -f "esbuild.config.js" ] || [ -f "esbuild.config.ts" ]; then
    echo "Detected ESbuild build system"
    esbuild --outdir="$INSTALL_DIR"

elif [ -f "webpack.config.js" ]; then
    echo "Detected Webpack build system"
    webpack --output-path "$INSTALL_DIR"

elif [ -f "conanfile.txt" ] || [ -f "conanfile.py" ]; then
    echo "Detected Conan build system"
    conan install . --install-folder build --build=missing
    conan build . --build-folder build
    copy_executables

elif [ -f "Earthfile" ]; then
    echo "Detected Earthly build system"
    earthly --build-arg INSTALL_DIR="$INSTALL_DIR" +default

elif [ -f "dagger.hcl" ] || [ -f "dagger.yaml" ]; then
    echo "Detected Dagger build system"
    dagger do build
    copy_executables

else
    echo "[pkgit] No recognized build system in $SRC_DIR"
    exit 1
fi

echo "Build and install completed successfully."

install_bins
